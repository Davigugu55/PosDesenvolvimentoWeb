This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
base/
  products.json
src/
  index.js
  index.ts
.gitignore
package.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="base/products.json">
[
  {
    "id": "1",
    "name": "Camiseta Básica",
    "description": "Camiseta de algodão 100% com corte regular.",
    "price": 49.90,
    "category": "Moda",
    "pictureUrl": "https://example.com/images/camiseta-basica.jpg"
  },
  {
    "id": "2",
    "name": "Smartphone X10",
    "description": "Smartphone com 128GB de armazenamento e câmera de 48MP.",
    "price": 1999.99,
    "category": "Eletronicos",
    "pictureUrl": "https://example.com/images/smartphone-x10.jpg"
  },
  {
    "id": "3",
    "name": "Chocolate Amargo 70%",
    "description": "Barra de chocolate premium com 70% de cacau.",
    "price": 12.50,
    "category": "Alimentos",
    "pictureUrl": "https://example.com/images/chocolate-amargo.jpg"
  },
  {
    "id": "4",
    "name": "Vinho Tinto Reserva",
    "description": "Vinho tinto envelhecido em barris de carvalho por 12 meses.",
    "price": 89.90,
    "category": "Bebidas",
    "pictureUrl": "https://example.com/images/vinho-tinto.jpg"
  },
  {
    "id": "5",
    "name": "Sofá 3 Lugares",
    "description": "Sofá confortável com revestimento em tecido de alta qualidade.",
    "price": 1299.00,
    "category": "CasaDecoracao",
    "pictureUrl": "https://example.com/images/sofa-3-lugares.jpg"
  },
  {
    "id": "6",
    "name": "Creme Hidratante Facial",
    "description": "Creme hidratante com ácido hialurônico para todos os tipos de pele.",
    "price": 59.90,
    "category": "SaudeBeleza",
    "pictureUrl": "https://example.com/images/creme-hidratante.jpg"
  },
  {
    "id": "7",
    "name": "Bicicleta Mountain Bike",
    "description": "Bicicleta com suspensão dupla e 21 marchas.",
    "price": 2499.00,
    "category": "EsporteLazer",
    "pictureUrl": "https://example.com/images/mountain-bike.jpg"
  },
  {
    "id": "8",
    "name": "Livro: A Arte da Guerra",
    "description": "Clássico da literatura sobre estratégia e liderança.",
    "price": 29.90,
    "category": "Livros",
    "pictureUrl": "https://example.com/images/a-arte-da-guerra.jpg"
  },
  {
    "id": "9",
    "name": "Caderno Universitário",
    "description": "Caderno com 200 folhas pautadas e capa dura.",
    "price": 19.90,
    "category": "Papelaria",
    "pictureUrl": "https://example.com/images/caderno-universitario.jpg"
  },
  {
    "id": "10",
    "name": "Boneca de Pano",
    "description": "Boneca artesanal feita com materiais hipoalergênicos.",
    "price": 39.90,
    "category": "Brinquedos",
    "pictureUrl": "https://example.com/images/boneca-de-pano.jpg"
  },
  {
    "id": "11",
    "name": "Relógio de Pulso Clássico",
    "description": "Relógio analógico com pulseira de couro genuíno.",
    "price": 249.90,
    "category": "Acessorios",
    "pictureUrl": "https://example.com/images/relogio-classico.jpg"
  },
  {
    "id": "12",
    "name": "Fone de Ouvido Bluetooth",
    "description": "Fone de ouvido sem fio com cancelamento de ruído ativo.",
    "price": 399.90,
    "category": "Eletronicos",
    "pictureUrl": "https://example.com/images/fone-bluetooth.jpg"
  },
  {
    "id": "13",
    "name": "Mesa de Escritório",
    "description": "Mesa compacta com acabamento em madeira e estrutura metálica.",
    "price": 599.00,
    "category": "CasaDecoracao",
    "pictureUrl": "https://example.com/images/mesa-escritorio.jpg"
  },
  {
    "id": "14",
    "name": "Tênis Esportivo",
    "description": "Tênis leve e confortável, ideal para corridas e caminhadas.",
    "price": 299.90,
    "category": "EsporteLazer",
    "pictureUrl": "https://example.com/images/tenis-esportivo.jpg"
  },
  {
    "id": "15",
    "name": "Cafeteira Elétrica",
    "description": "Cafeteira com capacidade para 1,5L e função de manter aquecido.",
    "price": 199.90,
    "category": "Eletrodomesticos",
    "pictureUrl": "https://example.com/images/cafeteira-eletrica.jpg"
  },
  {
    "id": "16",
    "name": "Jaqueta de Couro",
    "description": "Jaqueta estilosa feita com couro sintético de alta qualidade.",
    "price": 499.90,
    "category": "Moda",
    "pictureUrl": "https://example.com/images/jaqueta-couro.jpg"
  },
  {
    "id": "17",
    "name": "Kit de Ferramentas",
    "description": "Conjunto com 50 peças para reparos domésticos.",
    "price": 149.90,
    "category": "CasaDecoracao",
    "pictureUrl": "https://example.com/images/kit-ferramentas.jpg"
  },
  {
    "id": "18",
    "name": "Jogo de Panelas Antiaderentes",
    "description": "Conjunto com 5 panelas antiaderentes de alta durabilidade.",
    "price": 349.90,
    "category": "CasaDecoracao",
    "pictureUrl": "https://example.com/images/jogo-panelas.jpg"
  },
  {
    "id": "19",
    "name": "Câmera Fotográfica Digital",
    "description": "Câmera compacta com resolução de 20MP e zoom óptico de 10x.",
    "price": 1299.90,
    "category": "Eletronicos",
    "pictureUrl": "https://example.com/images/camera-digital.jpg"
  },
  {
    "id": "20",
    "name": "Mochila Escolar",
    "description": "Mochila resistente com compartimento para notebook.",
    "price": 99.90,
    "category": "Papelaria",
    "pictureUrl": "https://example.com/images/mochila-escolar.jpg"
  }
]
</file>

<file path="src/index.js">
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hello = hello;
var types_1 = require("skeleton/dist/types");
var fs = require("fs");
var world = 'world';
function hello(who) {
    if (who === void 0) { who = world; }
    return "Hello ".concat(who, "! ");
}
var getProducts = function () {
    try {
        // Lê o arquivo JSON de forma síncrona
        var fileContents = fs.readFileSync('base/products.json', 'utf-8');
        // Parseia o conteúdo JSON
        var products = JSON.parse(fileContents);
        // Exibe os produtos no console
        console.log(products);
    }
    catch (error) {
        // Caso ocorra erro ao ler o arquivo
        console.error('Erro ao ler o arquivo:', error);
    }
};
getProducts();
console.log(hello());
var a = types_1.ProductCategory.Moda;
</file>

<file path=".gitignore">
# Created by https://www.toptal.com/developers/gitignore/api/node
# Edit at https://www.toptal.com/developers/gitignore?templates=node

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit

# End of https://www.toptal.com/developers/gitignore/api/node
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "libReplacement": true,                           /* Enable lib replacement. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "out",                                     /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "erasableSyntaxOnly": true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
</file>

<file path="src/index.ts">
import {Product, ProductCategory} from "skeleton/dist/types";
import * as fs from 'fs';
import axios from 'axios';

const getProducts = async (): Promise<Product[]> => {
  try {
    const fileContents = fs.readFileSync('../base/products.json', 'utf-8');
    const products = JSON.parse(fileContents);

    // Exibe os produtos no console
    console.log(products);
    console.log(products.length);

    return products;
  } catch (error) {
    console.error('Erro ao ler o arquivo:', error);
    return [];
  }
};

const getAllowedCategory = async (product: Product) => {

  const response = await axios.get(`https://posdesweb.igormaldonado.com.br/api/allowedCategory?category=${product.category}`);

  console.log(`${product.id} - ${response.data.allowed} - ${product.category}`);

  return response.data.allowed;

}

const discardNotAllowedProducts = async (products: Product[]) => {

  const allowedProducts = [];
  for (const product of products) {
    if ( await getAllowedCategory(product) ) {
      allowedProducts.push(product);
    }else{
      console.log(`Discarded ${product.id}`);
    }
  }
  return allowedProducts;
}

(async () => {
  const products = await getProducts();
  const allowedProducts = await discardNotAllowedProducts(products);
  console.log(allowedProducts);
  console.log(allowedProducts.length);
})();

const a: ProductCategory = ProductCategory.Moda;
</file>

<file path="package.json">
{
  "name": "posdesweb",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "cd src && npx ts-node index.ts",
    "build": "npx tsc"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "axios": "^1.9.0",
    "repomix": "^0.3.3",
    "skeleton": "git+https://github.com/ifloor/PosDesenvolvimentoWebSkeleton.git",
    "ts-node": "^10.9.2"
  }
}
</file>

</files>
